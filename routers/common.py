from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram import F
from aiogram import html, types, Router
from FSMstates import CommonStates
from utils import *

work_markup = ReplyKeyboardMarkup(keyboard=[[
    KeyboardButton(text="–ú–µ–Ω—é")
]], resize_keyboard=True, one_time_keyboard=True)


router = Router()


@router.message(F.text == "–ú–µ–Ω—é")
async def get_menu(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_offer")],
        [InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="get_offers")],
        [InlineKeyboardButton(text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="get_user_info")]
    ])
    await message.answer(f"MENU", reply_markup=markup)


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    result = await db.tasks_handler(f"SELECT * FROM users WHERE telegram_user_id={message.from_user.id}")
    if not result:
        button = KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True)
        markup = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True, one_time_keyboard=True)
        await state.set_state(CommonStates.awaiting_contact)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n"
                             f"–ú—ã ... - —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –∑–∞–Ω–∏–º–∞—é—â–∞—è—Å—è –¥–æ—Å—Ç–∞–≤–∫–æ–π –í–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ Wildberries. üöö\n"
                             f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\". üòÉ",
                             reply_markup=markup)
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n"
                             f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ú–µ–Ω—é\" –≤–Ω–∏–∑—É üòä",
                             reply_markup=work_markup)


@router.message(F.contact, CommonStates.awaiting_contact)
async def process_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    phone_number = contact.phone_number
    user_id = contact.user_id
    first_name, last_name = contact.first_name, contact.last_name
    query = f"INSERT INTO users(phone_number, first_name, telegram_user_id, last_name) VALUES (" \
            f"'{phone_number}', " \
            f"'{first_name}', " \
            f"{user_id}, " \
            f"'{'–ù–µ —É–∫–∞–∑–∞–Ω–æ' if not last_name else last_name}'" \
            f")"
    result = await db.tasks_handler(query)
    await state.clear()
    await message.reply(f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=work_markup)


@router.message(CommonStates.awaiting_contact)
async def process_contact(message: Message) -> None:
    button = KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True)
    markup = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer(f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!",
                         reply_markup=markup)