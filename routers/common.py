from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram import F
from aiogram import html, types, Router
from FSMstates import CommonStates
from .keyboards.keyboards import work_markup, menu_markup
from utils import *
from config import info_channels

router = Router()
menu_photo = FSInputFile("./imgs/menu_img.png")


@router.message(F.text == "–ú–µ–Ω—é", lambda msg: msg.chat.id not in info_channels)
async def get_menu(message: Message, state: FSMContext):
    await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    if await state.get_state() is not None:
        await message_with_timer(
            bot=message.bot,
            text="–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é(–∫–Ω–æ–ø–∫–∞ \"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é\" –∏–ª–∏ /start)!",
            chat_id=message.chat.id,
            time=3
        )
        return
    state_data = await state.get_data()
    menu_msg_id = state_data.get("main_menu_msg_id")
    if menu_msg_id:
        await message.bot.delete_message(state.key.chat_id, message_id=menu_msg_id)
    msg = await message.answer_photo(menu_photo, reply_markup=menu_markup)
    await state.update_data(main_menu_msg_id=msg.message_id)


@router.message(CommandStart(), lambda msg: msg.chat.id not in info_channels)
async def command_start_handler(message: Message, state: FSMContext) -> None:
    state_data = await state.get_data()
    prev_bot_message = state_data.get("prev_bot_message")
    menu_msg_id = state_data.get("main_menu_msg_id")
    service_messages = state_data.get("service_messages")
    if prev_bot_message:
        await message.bot.delete_message(chat_id=state.key.chat_id, message_id=prev_bot_message)
    if menu_msg_id:
        await message.bot.delete_message(chat_id=state.key.chat_id, message_id=menu_msg_id)
    await state.clear()
    res = await user_registration_check(message.from_user.id)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê—Ä—Ç–µ–º!\n"
                             "üì¶ –û–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:\n"
                             "üëâ –ó–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –†–æ—Å—Å–∏–∏.  –î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥—ã WB, –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –ö–∞–∑–∞–Ω—å-–ú–æ—Å–∫–≤–∞-–ö–∞–∑–∞–Ω—å.\n"
                             "üëâ –§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç –≤ –ö–∞–∑–∞–Ω–∏.\n\n"
                             "üïí –ú—ã —ç–∫–æ–Ω–æ–º–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è.\n"
                             "üì© –ó–≤–æ–Ω–∏—Ç–µ, –ø–∏—à–∏—Ç–µ - @ArtemWBKazan\n"
                             "‚òéÔ∏è 89179202931  (WhatsApp)\n"
                             "üí° –†–∞–±–æ—Ç–∞–µ–º 7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é - –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á.\n"
                             "–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É: https://t.me/+ntpE-LxkhZ8wZGQ6\n\n"
                             "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä!\n")
    if not res:
        button = KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True)
        markup = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True, one_time_keyboard=True)
        await state.set_state(CommonStates.awaiting_contact)
        await message.answer(f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\". üòÉ",
                             reply_markup=markup)
    else:
        await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ú–µ–Ω—é\" –≤–Ω–∏–∑—É üòä",
                             reply_markup=work_markup)


@router.message(F.contact, CommonStates.awaiting_contact)
async def process_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    phone_number = contact.phone_number
    user_id = contact.user_id
    first_name, last_name = contact.first_name, contact.last_name
    query = f"INSERT INTO users(phone_number, first_name, telegram_user_id, last_name) VALUES (" \
            f"'{phone_number}', " \
            f"'{first_name}', " \
            f"{user_id}, " \
            f"'{'–ù–µ —É–∫–∞–∑–∞–Ω–æ' if not last_name else last_name}'" \
            f")"
    result = await db.tasks_handler(query)
    await state.clear()
    await message.reply(f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=work_markup)


@router.message(CommonStates.awaiting_contact)
async def process_contact(message: Message) -> None:
    button = KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True)
    markup = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer(f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!",
                         reply_markup=markup)


@router.message(F.text, lambda msg: msg.chat.id not in info_channels)
async def unknown_message(message: Message) -> None:
    await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await message_with_timer(
        bot=message.bot,
        text=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ú–µ–Ω—é\" –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ú–µ–Ω—é\".",
        chat_id=message.chat.id,
        time=3,
    )