from aiogram.types import CallbackQuery
from aiogram import F
from aiogram import Router
from aiogram.fsm.context import FSMContext
from FSMstates import MakeOrderStates
from aiogram.types import Message
from .keyboards.keyboards import clear_markup, order_validation_markup
from .callbacks import update_msg_history
from utils import *

router = Router()

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞


@router.message(MakeOrderStates.StartCity)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.EndCity)
    await state.update_data(start_city=message.text)
    message_history = await state.get_data()
    message_id_bot = message_history.get('prev_bot_message')
    await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await message.bot.edit_message_text(text=f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞:", chat_id=message.chat.id, message_id=message_id_bot)
    #msg = await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞:", reply_markup=clear_markup)
    #await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.EndCity)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.OrganizationName)
    await state.update_data(end_city=message.text)
    msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:", reply_markup=clear_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.OrganizationName)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.LoadingAdress)
    await state.update_data(org_name=message.text)
    msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:", reply_markup=clear_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.LoadingAdress)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.Orientier)
    await state.update_data(loading_address=message.text)
    msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:", reply_markup=clear_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.Orientier)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.LoadingDateTime)
    await state.update_data(orientier=message.text)
    msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:\n–ü—Ä–∏–º–µ—Ä: 01.01.2024 –≤ 12:00 (—Å 08:00 –¥–æ 20:00)", reply_markup=clear_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.LoadingDateTime)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.DeliveryPackaging)
    await state.update_data(loading_datetime=message.text)
    msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É —Ç–æ–≤–∞—Ä–∞:", reply_markup=clear_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.DeliveryPackaging)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.DeliveryCount)
    await state.update_data(delivery_packaging=message.text)
    msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=clear_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.DeliveryCount)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.TotalWeight)
    await state.update_data(delivery_packaging=message.text)
    msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏:", reply_markup=clear_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.TotalWeight)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.LoaderWorkerContact)
    await state.update_data(total_weight=message.text)
    msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫–µ:", reply_markup=clear_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.LoaderWorkerContact)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.DeliveryType)
    await state.update_data(loader_worker_contact=message.text)
    msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏ (QR –ø–æ—Å—Ç–∞–≤–∫–∞, –ú–æ–Ω–æ–ü–∞–ª–µ—Ç, –ö–æ—Ä–æ–±, QR –ø—Ä–∏–µ–º–∫–∞):", reply_markup=clear_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.DeliveryType)
async def make_offer(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.PaymentType)
    await state.update_data(delivery_type=message.text)
    msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=clear_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.PaymentType)
async def make_offer(message : Message, state : FSMContext):
    await state.update_data(payment_type=message.text)
    await state.set_state(MakeOrderStates.ValidateOrder)
    msg = await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à –∑–∞–∫–∞–∑:")
    await validate_offer(message, state)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.UpdateValue)
async def make_order(message : Message, state : FSMContext):
    await state.set_state(MakeOrderStates.ValidateOrder)
    data = await state.get_data()

    await state.update_data({data['update_field_name']: message.text})
    msg = await message.answer("–û—Ç–ª–∏—á–Ω–æ!")
    await validate_offer(message, state)
    await update_msg_history(message.message_id, msg.message_id, state)


@router.message(MakeOrderStates.ValidateOrder)
async def validate_offer(message : Message, state : FSMContext):
    data = await state.get_data()
    msg = await message.answer(f"1. –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏: {data['start_city']}\n"
                         f"2. –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {data['end_city']}\n"
                         f"3. –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {data['org_name']}\n"
                         f"4. –ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: {data['loading_address']}\n"
                         f"5. –û—Ä–∏–µ–Ω—Ç–∏—Ä: {data['orientier']}\n"
                         f"6. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {data['loading_datetime']}\n"
                         f"7. –£–ø–∞–∫–æ–≤–∫–∞: {data['delivery_packaging']}\n"
                         f"8. –û–±—â–∏–π –≤–µ—Å: {data['total_weight']}\n"
                         f"9. –¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏(QR –ø–æ—Å—Ç–∞–≤–∫–∞, –ú–æ–Ω–æ–ü–∞–ª–µ—Ç, –ö–æ—Ä–æ–±, QR –ø—Ä–∏–µ–º–∫–∞): {data['delivery_type']}\n"
                         f"10. –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data['payment_type']}\n"
                         f"–ï—Å–ª–∏ –∑–∞–∫–∞–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω –≤–µ—Ä–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É ‚úÖ. \n"
                         f"–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –≥–¥–µ-—Ç–æ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É ‚ùå, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ üòä",
                         reply_markup=order_validation_markup)
    await update_msg_history(message.message_id, msg.message_id, state)


# -------------------------------------------------------------------------------------------------
